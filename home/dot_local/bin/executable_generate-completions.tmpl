#!/usr/bin/env bash
# Generate shell completions for tools
{{- if .dev_computer }}

set -euo pipefail

COMPLETIONS_DIR="$HOME/.oh-my-zsh/completions"
mkdir -p "$COMPLETIONS_DIR"

# Colors for output
log() { echo -e "\033[0;34m[completions]\033[0m $1"; }
success() { echo -e "\033[0;32m✓\033[0m $1"; }
warning() { echo -e "\033[1;33m⚠\033[0m $1"; }
error() { echo -e "\033[0;31m✗\033[0m $1"; }

show_help() {
    cat << EOF
Usage: generate-completions [OPTIONS] [TOOL...]

Generate shell completions for development tools.

OPTIONS:
    --mise          Generate completions for all mise-managed tools
    --all           Generate completions for mise tools + common tools
    --help, -h      Show this help message

EXAMPLES:
    generate-completions --mise                    # All mise tools
    generate-completions gh docker kubectl        # Specific tools
    generate-completions --all                     # Everything
    generate-completions mas chezmoi jq           # Custom selection

SUPPORTED TOOLS:
    Mise tools: deno, bun, pnpm, uv (auto-detected)
    System tools: gh, docker, kubectl, chezmoi, bat, eza, jq, lazygit, 
                  mas, cargo, rustup, terraform, aws, gcloud, etc.

EOF
}

# Generate completion for a tool with standard patterns
generate_completion() {
    local tool="$1"
    local output_file="$COMPLETIONS_DIR/_$tool"
    
    command -v "$tool" >/dev/null 2>&1 || {
        warning "$tool not installed, skipping"
        return 1
    }
    
    log "Generating $tool completions..."
    
    # Try different completion command patterns
    local patterns=(
        "$tool completion zsh"
        "$tool completions zsh"
        "$tool --completion zsh"
        "$tool --completions zsh"
        "$tool generate-completions zsh"
        "$tool shell-completion zsh"
    )
    
    for cmd in "${patterns[@]}"; do
        if $cmd > "$output_file" 2>/dev/null && [[ -s "$output_file" ]]; then
            success "Generated $tool completions"
            return 0
        fi
    done
    
    rm -f "$output_file"
    warning "Could not generate $tool completions"
    return 1
}

# Generate completion with specific command
generate_with_cmd() {
    local tool="$1"
    local cmd="$2"
    local output_file="$COMPLETIONS_DIR/_$tool"
    
    command -v "$tool" >/dev/null 2>&1 || {
        warning "$tool not installed, skipping"
        return 1
    }
    
    log "Generating $tool completions..."
    
    if eval "$cmd" > "$output_file" 2>/dev/null && [[ -s "$output_file" ]]; then
        success "Generated $tool completions"
        return 0
    else
        rm -f "$output_file"
        warning "Could not generate $tool completions"
        return 1
    fi
}

# Generate completions for mise-managed tools
generate_mise_tools() {
    if ! command -v mise >/dev/null 2>&1; then
        warning "mise not installed, skipping mise tools"
        return
    fi
    
    log "Generating completions for mise-managed tools..."
    
    local mise_tools
    if mise_tools=$(mise list --installed 2>/dev/null | awk '{print $1}' | sort -u); then
        while IFS= read -r tool; do
            [[ -n "$tool" ]] || continue
            
            case "$tool" in
                "deno")
                    generate_with_cmd "$tool" "mise exec deno -- deno completions zsh"
                    ;;
                "bun")
                    generate_with_cmd "$tool" "mise exec bun -- bun completions"
                    ;;
                "pnpm")
                    generate_with_cmd "$tool" "mise exec pnpm -- pnpm completion zsh"
                    ;;
                "uv")
                    generate_with_cmd "$tool" "mise exec uv -- uv --generate-shell-completion zsh"
                    ;;
                "go"|"python"|"rust"|"usage")
                    # Skip tools without useful completions
                    continue
                    ;;
                *)
                    # Try generic patterns for other mise tools
                    if mise which "$tool" >/dev/null 2>&1; then
                        generate_with_cmd "$tool" "mise exec $tool -- $tool completion zsh" ||
                        generate_with_cmd "$tool" "mise exec $tool -- $tool completions zsh" || true
                    fi
                    ;;
            esac
        done <<< "$mise_tools"
    fi
}

# Generate completion for specific tool
generate_tool() {
    local tool="$1"
    
    case "$tool" in
        # Special cases with custom commands
        "cargo")
            generate_with_cmd "$tool" "rustup completions zsh cargo"
            ;;
        "rustup")
            generate_with_cmd "$tool" "rustup completions zsh rustup"
            ;;
        *)
            generate_completion "$tool"
            ;;
    esac
}

# Main execution
main() {
    local generate_mise=false
    local generate_all=false
    local tools=()
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --mise)
                generate_mise=true
                shift
                ;;
            --all)
                generate_all=true
                generate_mise=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            -*)
                error "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                tools+=("$1")
                shift
                ;;
        esac
    done
    
    # If no args, show help
    if [[ $generate_mise == false && $generate_all == false && ${#tools[@]} -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    # Generate mise tools if requested
    if [[ $generate_mise == true ]]; then
        generate_mise_tools
    fi
    
    # Generate common tools if --all
    if [[ $generate_all == true ]]; then
        local common_tools=(
            "gh" "docker" "kubectl" "chezmoi" "bat" "eza" "jq" "lazygit" "mas"
            "cargo" "rustup" "terraform" "aws" "gcloud"
        )
        for tool in "${common_tools[@]}"; do
            generate_tool "$tool"
        done
    fi
    
    # Generate specific tools
    for tool in "${tools[@]}"; do
        generate_tool "$tool"
    done
    
    log "Done! Run 'compinit' or restart your shell to activate new completions."
}

main "$@"

{{- end }}