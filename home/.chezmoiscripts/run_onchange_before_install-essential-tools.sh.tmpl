#!/usr/bin/env bash

# Essential Development Tools Installation
# This script runs when its content changes, installing core development tools
# Template hash: {{ include "dot_config/dotfile_source/dev-tools.sh.tmpl" | sha256sum }}

#!/usr/bin/env bash
set -euo pipefail

{{ if .dev_computer -}}
echo "🔧 Installing essential development tools..."

# Update package managers first
{{- if eq .chezmoi.os "darwin" }}
if command -v brew >/dev/null 2>&1; then
    echo "📦 Updating Homebrew..."
    brew update || echo "⚠️  Homebrew update failed, continuing..."
fi
{{- else if eq .chezmoi.os "linux" }}
if command -v apt-get >/dev/null 2>&1; then
    echo "📦 Updating apt packages..."
    sudo apt-get update -qq || echo "⚠️  apt update failed, continuing..."
elif command -v dnf >/dev/null 2>&1; then
    echo "📦 Updating dnf packages..."
    sudo dnf check-update -q || echo "⚠️  dnf update failed, continuing..."
fi
{{- end }}

# Install pnpm (highest priority)
if ! command -v pnpm >/dev/null 2>&1; then
    echo "📦 Installing pnpm..."
    curl -fsSL https://get.pnpm.io/install.sh | sh-
    
    # Ensure pnpm is in PATH for this script
    {{- if eq .chezmoi.os "darwin" }}
    export PNPM_HOME="$HOME/Library/pnpm"
    {{- else }}
    export PNPM_HOME="$HOME/.local/share/pnpm"
    {{- end }}
    export PATH="$PNPM_HOME:$PATH"
else
    echo "✅ pnpm already installed"
fi

# Install Node.js via pnpm if not available
if ! command -v node >/dev/null 2>&1; then
    echo "📦 Installing Node.js via pnpm..."
    pnpm env use --global lts || echo "⚠️  Node.js installation failed"
else
    echo "✅ Node.js already available"
fi

{{- if eq .chezmoi.os "darwin" }}
# macOS-specific installations via Homebrew
HOMEBREW_TOOLS=(
    "starship"          # Cross-shell prompt
    "zoxide"            # Better cd command  
    "fzf"               # Fuzzy finder
    "gh"                # GitHub CLI
    "lazygit"           # Git TUI
    "delta"             # Better git diff
    "topgrade"          # Upgrade everything
)

for tool in "${HOMEBREW_TOOLS[@]}"; do
    if ! command -v "$tool" >/dev/null 2>&1; then
        echo "📦 Installing $tool..."
        brew install "$tool" || echo "⚠️  Failed to install $tool"
    else
        echo "✅ $tool already installed"
    fi
done

{{- else if eq .chezmoi.os "linux" }}
# Linux-specific installations
echo "📦 Installing essential tools on Linux..."

# Install via package manager
{{- if lookPath "apt-get" }}
DEBIAN_TOOLS=(
    "curl"
    "git" 
    "build-essential"
    "unzip"
)

for tool in "${DEBIAN_TOOLS[@]}"; do
    if ! dpkg -l | grep -q "^ii  $tool "; then
        echo "📦 Installing $tool..."
        sudo apt-get install -y "$tool" || echo "⚠️  Failed to install $tool"
    else
        echo "✅ $tool already installed"
    fi
done
{{- end }}

# Install modern tools via direct download/cargo
install_rust_tool() {
    local tool="$1"
    if ! command -v "$tool" >/dev/null 2>&1; then
        echo "📦 Installing $tool via cargo..."
        if command -v cargo >/dev/null 2>&1; then
            cargo install "$tool" || echo "⚠️  Failed to install $tool"
        else
            echo "⚠️  Cargo not available, skipping $tool"
        fi
    fi
}

# Install Rust if not available (needed for many modern CLI tools)
if ! command -v cargo >/dev/null 2>&1; then
    echo "📦 Installing Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
fi

# Install Rust-based tools
install_rust_tool "starship"
install_rust_tool "zoxide" 
install_rust_tool "topgrade"

{{- end }}

# Install programming language tools
echo "📦 Installing language-specific tools..."

# Python: uv (fast pip replacement)
if ! command -v uv >/dev/null 2>&1; then
    echo "📦 Installing uv (Python package manager)..."
    curl -LsSf https://astral.sh/uv/install.sh | sh || echo "⚠️  uv installation failed"
else
    echo "✅ uv already installed"
fi

# Deno (JavaScript/TypeScript runtime)
if ! command -v deno >/dev/null 2>&1; then
    echo "📦 Installing Deno..."
    curl -fsSL https://deno.land/install.sh | sh || echo "⚠️  Deno installation failed"
else
    echo "✅ Deno already installed"
fi

# Bun (JavaScript runtime and package manager)
if ! command -v bun >/dev/null 2>&1; then
    echo "📦 Installing Bun..."
    curl -fsSL https://bun.sh/install | bash || echo "⚠️  Bun installation failed"
else
    echo "✅ Bun already installed"
fi

echo "✅ Essential tools installation completed!"
{{- else }}
echo "🏠 Skipping development tools installation (not a dev computer)"
{{- end }}